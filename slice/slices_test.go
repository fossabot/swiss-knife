// Code generated by go generate; DO NOT EDIT.
// This file was generated by robots at
// 2019-04-30 18:12:06.199209 -0500 CDT m=+0.006935396
package slice

import (
	"reflect"
	"testing"
)

func TestBoolForEach(t *testing.T) {
	inputInterface := getInput("bool")
	input := inputInterface.([]bool)

	expectInterface := getExpect("bool")
	expect := expectInterface.([]bool)

	current := make([]bool, len(expect))

	if err := BoolForEach(input, func(e bool, i int) {
		current[i] = boolFunction(e)
	}); err != nil {
		t.Errorf("running BoolForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("BoolForEach returns %v; expected %v", current, expect)
	}
}

func TestComplex128ForEach(t *testing.T) {
	inputInterface := getInput("complex128")
	input := inputInterface.([]complex128)

	expectInterface := getExpect("complex128")
	expect := expectInterface.([]complex128)

	current := make([]complex128, len(expect))

	if err := Complex128ForEach(input, func(e complex128, i int) {
		current[i] = complex128Function(e)
	}); err != nil {
		t.Errorf("running Complex128ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Complex128ForEach returns %v; expected %v", current, expect)
	}
}

func TestComplex64ForEach(t *testing.T) {
	inputInterface := getInput("complex64")
	input := inputInterface.([]complex64)

	expectInterface := getExpect("complex64")
	expect := expectInterface.([]complex64)

	current := make([]complex64, len(expect))

	if err := Complex64ForEach(input, func(e complex64, i int) {
		current[i] = complex64Function(e)
	}); err != nil {
		t.Errorf("running Complex64ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Complex64ForEach returns %v; expected %v", current, expect)
	}
}

func TestErrorForEach(t *testing.T) {
	inputInterface := getInput("error")
	input := inputInterface.([]error)

	expectInterface := getExpect("error")
	expect := expectInterface.([]error)

	current := make([]error, len(expect))

	if err := ErrorForEach(input, func(e error, i int) {
		current[i] = errorFunction(e)
	}); err != nil {
		t.Errorf("running ErrorForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("ErrorForEach returns %v; expected %v", current, expect)
	}
}

func TestFloat32ForEach(t *testing.T) {
	inputInterface := getInput("float32")
	input := inputInterface.([]float32)

	expectInterface := getExpect("float32")
	expect := expectInterface.([]float32)

	current := make([]float32, len(expect))

	if err := Float32ForEach(input, func(e float32, i int) {
		current[i] = float32Function(e)
	}); err != nil {
		t.Errorf("running Float32ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Float32ForEach returns %v; expected %v", current, expect)
	}
}

func TestFloat64ForEach(t *testing.T) {
	inputInterface := getInput("float64")
	input := inputInterface.([]float64)

	expectInterface := getExpect("float64")
	expect := expectInterface.([]float64)

	current := make([]float64, len(expect))

	if err := Float64ForEach(input, func(e float64, i int) {
		current[i] = float64Function(e)
	}); err != nil {
		t.Errorf("running Float64ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Float64ForEach returns %v; expected %v", current, expect)
	}
}

func TestIntForEach(t *testing.T) {
	inputInterface := getInput("int")
	input := inputInterface.([]int)

	expectInterface := getExpect("int")
	expect := expectInterface.([]int)

	current := make([]int, len(expect))

	if err := IntForEach(input, func(e int, i int) {
		current[i] = intFunction(e)
	}); err != nil {
		t.Errorf("running IntForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("IntForEach returns %v; expected %v", current, expect)
	}
}

func TestInt16ForEach(t *testing.T) {
	inputInterface := getInput("int16")
	input := inputInterface.([]int16)

	expectInterface := getExpect("int16")
	expect := expectInterface.([]int16)

	current := make([]int16, len(expect))

	if err := Int16ForEach(input, func(e int16, i int) {
		current[i] = int16Function(e)
	}); err != nil {
		t.Errorf("running Int16ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Int16ForEach returns %v; expected %v", current, expect)
	}
}

func TestInt32ForEach(t *testing.T) {
	inputInterface := getInput("int32")
	input := inputInterface.([]int32)

	expectInterface := getExpect("int32")
	expect := expectInterface.([]int32)

	current := make([]int32, len(expect))

	if err := Int32ForEach(input, func(e int32, i int) {
		current[i] = int32Function(e)
	}); err != nil {
		t.Errorf("running Int32ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Int32ForEach returns %v; expected %v", current, expect)
	}
}

func TestInt64ForEach(t *testing.T) {
	inputInterface := getInput("int64")
	input := inputInterface.([]int64)

	expectInterface := getExpect("int64")
	expect := expectInterface.([]int64)

	current := make([]int64, len(expect))

	if err := Int64ForEach(input, func(e int64, i int) {
		current[i] = int64Function(e)
	}); err != nil {
		t.Errorf("running Int64ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Int64ForEach returns %v; expected %v", current, expect)
	}
}

func TestInt8ForEach(t *testing.T) {
	inputInterface := getInput("int8")
	input := inputInterface.([]int8)

	expectInterface := getExpect("int8")
	expect := expectInterface.([]int8)

	current := make([]int8, len(expect))

	if err := Int8ForEach(input, func(e int8, i int) {
		current[i] = int8Function(e)
	}); err != nil {
		t.Errorf("running Int8ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Int8ForEach returns %v; expected %v", current, expect)
	}
}

func TestStringForEach(t *testing.T) {
	inputInterface := getInput("string")
	input := inputInterface.([]string)

	expectInterface := getExpect("string")
	expect := expectInterface.([]string)

	current := make([]string, len(expect))

	if err := StringForEach(input, func(e string, i int) {
		current[i] = stringFunction(e)
	}); err != nil {
		t.Errorf("running StringForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("StringForEach returns %v; expected %v", current, expect)
	}
}

func TestUintForEach(t *testing.T) {
	inputInterface := getInput("uint")
	input := inputInterface.([]uint)

	expectInterface := getExpect("uint")
	expect := expectInterface.([]uint)

	current := make([]uint, len(expect))

	if err := UintForEach(input, func(e uint, i int) {
		current[i] = uintFunction(e)
	}); err != nil {
		t.Errorf("running UintForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("UintForEach returns %v; expected %v", current, expect)
	}
}

func TestUint16ForEach(t *testing.T) {
	inputInterface := getInput("uint16")
	input := inputInterface.([]uint16)

	expectInterface := getExpect("uint16")
	expect := expectInterface.([]uint16)

	current := make([]uint16, len(expect))

	if err := Uint16ForEach(input, func(e uint16, i int) {
		current[i] = uint16Function(e)
	}); err != nil {
		t.Errorf("running Uint16ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Uint16ForEach returns %v; expected %v", current, expect)
	}
}

func TestUint32ForEach(t *testing.T) {
	inputInterface := getInput("uint32")
	input := inputInterface.([]uint32)

	expectInterface := getExpect("uint32")
	expect := expectInterface.([]uint32)

	current := make([]uint32, len(expect))

	if err := Uint32ForEach(input, func(e uint32, i int) {
		current[i] = uint32Function(e)
	}); err != nil {
		t.Errorf("running Uint32ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Uint32ForEach returns %v; expected %v", current, expect)
	}
}

func TestUint64ForEach(t *testing.T) {
	inputInterface := getInput("uint64")
	input := inputInterface.([]uint64)

	expectInterface := getExpect("uint64")
	expect := expectInterface.([]uint64)

	current := make([]uint64, len(expect))

	if err := Uint64ForEach(input, func(e uint64, i int) {
		current[i] = uint64Function(e)
	}); err != nil {
		t.Errorf("running Uint64ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Uint64ForEach returns %v; expected %v", current, expect)
	}
}

func TestUint8ForEach(t *testing.T) {
	inputInterface := getInput("uint8")
	input := inputInterface.([]uint8)

	expectInterface := getExpect("uint8")
	expect := expectInterface.([]uint8)

	current := make([]uint8, len(expect))

	if err := Uint8ForEach(input, func(e uint8, i int) {
		current[i] = uint8Function(e)
	}); err != nil {
		t.Errorf("running Uint8ForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("Uint8ForEach returns %v; expected %v", current, expect)
	}
}

func TestUintptrForEach(t *testing.T) {
	inputInterface := getInput("uintptr")
	input := inputInterface.([]uintptr)

	expectInterface := getExpect("uintptr")
	expect := expectInterface.([]uintptr)

	current := make([]uintptr, len(expect))

	if err := UintptrForEach(input, func(e uintptr, i int) {
		current[i] = uintptrFunction(e)
	}); err != nil {
		t.Errorf("running UintptrForEach got the error: %s", err.Error())
	}

	if got := reflect.DeepEqual(current, expect); !got {
		t.Errorf("UintptrForEach returns %v; expected %v", current, expect)
	}
}


func TestIncludes(t *testing.T) {
	t.Run("Testing Includes", func(t *testing.T) {
	
		t.Run("Testing boolIncludes", func (t *testing.T) {
			input := getInput("bool")

			elements := input.([]bool)
			expect := true

			// Testing without third parameter
			t.Logf("Testing boolIncludes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing boolIncludes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing boolIncludes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing boolIncludes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing boolIncludes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing complex128Includes", func (t *testing.T) {
			input := getInput("complex128")

			elements := input.([]complex128)
			expect := true

			// Testing without third parameter
			t.Logf("Testing complex128Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing complex128Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing complex128Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing complex128Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing complex128Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing complex64Includes", func (t *testing.T) {
			input := getInput("complex64")

			elements := input.([]complex64)
			expect := true

			// Testing without third parameter
			t.Logf("Testing complex64Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing complex64Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing complex64Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing complex64Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing complex64Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing errorIncludes", func (t *testing.T) {
			input := getInput("error")

			elements := input.([]error)
			expect := true

			// Testing without third parameter
			t.Logf("Testing errorIncludes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing errorIncludes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing errorIncludes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing errorIncludes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing errorIncludes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing float32Includes", func (t *testing.T) {
			input := getInput("float32")

			elements := input.([]float32)
			expect := true

			// Testing without third parameter
			t.Logf("Testing float32Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing float32Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing float32Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing float32Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing float32Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing float64Includes", func (t *testing.T) {
			input := getInput("float64")

			elements := input.([]float64)
			expect := true

			// Testing without third parameter
			t.Logf("Testing float64Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing float64Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing float64Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing float64Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing float64Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing intIncludes", func (t *testing.T) {
			input := getInput("int")

			elements := input.([]int)
			expect := true

			// Testing without third parameter
			t.Logf("Testing intIncludes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing intIncludes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing intIncludes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing intIncludes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing intIncludes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing int16Includes", func (t *testing.T) {
			input := getInput("int16")

			elements := input.([]int16)
			expect := true

			// Testing without third parameter
			t.Logf("Testing int16Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing int16Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing int16Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing int16Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing int16Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing int32Includes", func (t *testing.T) {
			input := getInput("int32")

			elements := input.([]int32)
			expect := true

			// Testing without third parameter
			t.Logf("Testing int32Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing int32Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing int32Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing int32Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing int32Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing int64Includes", func (t *testing.T) {
			input := getInput("int64")

			elements := input.([]int64)
			expect := true

			// Testing without third parameter
			t.Logf("Testing int64Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing int64Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing int64Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing int64Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing int64Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing int8Includes", func (t *testing.T) {
			input := getInput("int8")

			elements := input.([]int8)
			expect := true

			// Testing without third parameter
			t.Logf("Testing int8Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing int8Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing int8Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing int8Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing int8Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing stringIncludes", func (t *testing.T) {
			input := getInput("string")

			elements := input.([]string)
			expect := true

			// Testing without third parameter
			t.Logf("Testing stringIncludes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing stringIncludes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing stringIncludes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing stringIncludes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing stringIncludes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing uintIncludes", func (t *testing.T) {
			input := getInput("uint")

			elements := input.([]uint)
			expect := true

			// Testing without third parameter
			t.Logf("Testing uintIncludes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing uintIncludes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing uintIncludes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing uintIncludes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing uintIncludes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing uint16Includes", func (t *testing.T) {
			input := getInput("uint16")

			elements := input.([]uint16)
			expect := true

			// Testing without third parameter
			t.Logf("Testing uint16Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing uint16Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing uint16Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing uint16Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing uint16Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing uint32Includes", func (t *testing.T) {
			input := getInput("uint32")

			elements := input.([]uint32)
			expect := true

			// Testing without third parameter
			t.Logf("Testing uint32Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing uint32Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing uint32Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing uint32Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing uint32Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing uint64Includes", func (t *testing.T) {
			input := getInput("uint64")

			elements := input.([]uint64)
			expect := true

			// Testing without third parameter
			t.Logf("Testing uint64Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing uint64Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing uint64Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing uint64Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing uint64Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing uint8Includes", func (t *testing.T) {
			input := getInput("uint8")

			elements := input.([]uint8)
			expect := true

			// Testing without third parameter
			t.Logf("Testing uint8Includes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing uint8Includes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing uint8Includes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing uint8Includes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing uint8Includes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
		t.Run("Testing uintptrIncludes", func (t *testing.T) {
			input := getInput("uintptr")

			elements := input.([]uintptr)
			expect := true

			// Testing without third parameter
			t.Logf("Testing uintptrIncludes(%v, %v)", input, elements[0])
			got, err := Includes(input, elements[0])
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but out the range of the
			// elements of input, expected true
			t.Logf("Testing uintptrIncludes(%v, %v, %d)", input, elements[0], -10)
			got, err = Includes(input, elements[0], -10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third negative parameter but in the range of the
			// elements of input, expected false
			expect = false

			t.Logf("Testing uintptrIncludes(%v, %v, %d)", input, elements[0], -1)
			got, err = Includes(input, elements[0], -1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but in the range of the
			// elements of input, expected false
			t.Logf("Testing uintptrIncludes(%v, %v, %d)", input, elements[0], 1)
			got, err = Includes(input, elements[0], 1)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}

			// Testing with third positive parameter but out the range of the
			// elements of input, expected false
			t.Logf("Testing uintptrIncludes(%v, %v, %d)", input, elements[0], 10)
			got, err = Includes(input, elements[0], 10)
			if err != nil {
				t.Errorf("running Includes got the error: %s", err.Error())
			}

			if got != expect {
				t.Errorf("Includes returns %v; expected %v", got, expect)
			}
		})
	
	})
}
